// Declarative pipeline
pipeline {
    agent any
    options {
        skipDefaultCheckout() // Manual checkout stage
    }
    parameters {
        choice(name: 'ACTION', choices: ['update_all_images', 'build_images'])

    }

    stages {
        stage('Checkout') {
            steps {
                // checkout scm
                checkout scmGit(branches: [[name: '*/dev_dockers']],
                    extensions: [
                        cleanAfterCheckout(),
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                            [path: 'update-docker_images']]]
                    ],
                    userRemoteConfigs: [[url: 'https://github.com/ChunPanYung/jenkins_jobs'],
                        [url: 'https://github.com/ChunPanYung/docker_images']]
                ) // checkout
            }
        }

        stage('Update all images...') {
            steps {
                sh '''
                    pwd
                    ls -la
                '''
                sh './update-docker_images/upgrade_all_images.sh'
            }
        }

        stage('Build custom docker images...') {
            steps {
                sh '''#!/usr/bin/env bash
                    # docker compose build --pull
                '''
            }
        }

        stage('Prune unused images...') {
            steps {
                sh 'docker image prune --force'
            }
        } // End stage
    } // End stages

    post {
        always {
            echo 'List all docker images...'
            sh 'docker images'
        }
        failure {
            echo 'Job failed!'
            cleanWs()
        }
    }
}
