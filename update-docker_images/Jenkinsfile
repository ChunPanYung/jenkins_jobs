// Declarative pipeline
pipeline {
    agent any
    options {
        skipDefaultCheckout() // Manual checkout stage
    }
    parameters {
        choice(name: 'ACTION', choices: ['update_all_images', 'build_images'])

    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                // checkout([
                //     $class: 'GitSCM',
                //     extensions: [
                //         [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                //             [path: 'update-docker_images'], [path: 'jenkins']
                //         ]]
                //     ],
                //     userRemoteConfigs: [
                //         [url: 'https://github.com/ChunPanYung/jenkins_jobs'],
                //         [url: 'https://github.com/ChunPanYung/docker_images']
                //     ]
                // ])
                sh 'tree'
            }
        }

        stage('Update all images...') {
            steps {
                sh './docker_images/upgrade_all_images.sh'
            }
        }

        stage('Build custom docker images...') {
            steps {
                sh '''#!/usr/bin/env bash
                    # docker compose build --pull
                    tree
                '''
            }
        }

        stage('Prune unused images...') {
            steps {
                sh '''#!/bin/bash
                    docker image prune --force
                '''
            }
        } // End stage
    } // End stages

    post {
        always {
            echo 'List all docker images...'
            sh 'docker images'
        }
        failure {
            echo 'Job failed!'
            cleanWs()
        }
    }
}
